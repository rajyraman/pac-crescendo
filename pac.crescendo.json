{
  "$schema": "https://aka.ms/PowerShell/Crescendo/Schemas/2022-06#",
  "Commands": [
    {
      "Verb": "Get",
      "Noun": "UnmanagedSolutions",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "solution",
        "list",
        "--json"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Gets list of unmanaged solutions",
      "Aliases": [
        "pac-sol-unm"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "Handler": "$args[0] | ConvertFrom-Json | where { $_.IsManaged -eq $false } | sort -Property FriendlyName | select SolutionUniqueName, FriendlyName, VersionNumber"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Get",
      "Noun": "ManagedSolutions",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "solution",
        "list",
        "--json"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Gets list of managed solutions",
      "Aliases": [
        "pac-sol-man"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$input | ConvertFrom-Json | where { $_.IsManaged -eq $true } | sort -Property FriendlyName | select SolutionUniqueName, FriendlyName, VersionNumber"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Export",
      "Noun": "Solutions",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "solution",
        "list",
        "--json"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Exports Unmanaged solution to disk",
      "Aliases": [
        "pac-sol-exp"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$selected = $input | ConvertFrom-Json | where { $_.IsManaged -eq $false } | sort -Property FriendlyName | select SolutionUniqueName, FriendlyName, VersionNumber | Out-ConsoleGridView; $selected | ForEach-Object { Write-Host \"Exporting solution $($_.SolutionUniqueName)..\"; pac solution export -p . -n $_.SolutionUniqueName -ow }"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Expand",
      "Noun": "Solutions",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "solution",
        "list",
        "--json"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Exports Unmanaged solution to disk and unpacks it",
      "Aliases": [
        "pac-sol-unp"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$selected = $input | ConvertFrom-Json | where { $_.IsManaged -eq $false } | sort -Property FriendlyName | select SolutionUniqueName, FriendlyName, VersionNumber | Out-ConsoleGridView; $selected | ForEach-Object { Write-Host \"Cloning solution $($_.SolutionUniqueName)..\"; pac solution clone -p Both -o . -n $_.SolutionUniqueName -a -pca }"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Select",
      "Noun": "AuthProfile",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "auth",
        "list"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Selects a profile for authentication",
      "Aliases": [
        "pac-auth-sel"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$selected = $input | ConvertFrom-TextTable -ColumnOffset 0,6,13,23,28,45,89,126 | sort -Property Friendly_Name | Out-ConsoleGridView -OutputMode Single; if($selected -ne $null) { Write-Host \"Selecting Auth Profile $($selected.Friendly_Name)..\"; pac auth select -i $selected.Index.Substring(1,1) }"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Add",
      "Noun": "AuthProfiles",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "org",
        "list"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Creates auth profiles for all environments user has access to",
      "Aliases": [
        "pac-auth-add"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$selected = $input | ConvertFrom-TextTable -ColumnOffset 0,17,54,97 | Out-ConsoleGridView; $selected | ForEach-Object { $env = [uri]$_.Environment_URL; Write-Host \"Creating Auth Profile for $($_.Environment_URL)..\"; pac auth create -n $env.Host.Split(\".\")[0] -env $_.Environment_URL; }; pac auth list"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [],
      "Examples": []
    },
    {
      "Verb": "Get",
      "Noun": "Users",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "org",
        "fetch"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Get users and their associated roles",
      "Aliases": [
        "pac-users"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$input | Select-Object -Skip 3 | ConvertFrom-TextTable -ColumnOffset 0,37,59,157,209,246,283 -ConvertPropertyValue | Select-Object @{N=\"User\"; E={$_.\"systemuser.fullname\"}}, @{N=\"Email\"; E={$_.\"systemuser.internalemailaddress\"}}, @{N=\"Role\"; E={$_.\"role.name\"}}, @{N=\"Disabled\"; E={$_.\"systemuser.isdisabled\"}} | Out-ConsoleGridView -OutputMode Multiple"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [
        {
          "OriginalName": "--xml",
          "OriginalPosition": 0,
          "Name": "Role",
          "DefaultValue": "<fetch><entity name='systemuserroles'><link-entity name='systemuser' from='systemuserid' to='systemuserid' alias='systemuser'><attribute name='fullname'/><attribute name='systemuserid'/><attribute name='internalemailaddress'/><attribute name='isdisabled'/><order attribute='fullname'/></link-entity><link-entity name='role' from='roleid' to='roleid' alias='role'><attribute name='name'/><attribute name='roleid'/><order attribute='name'/></link-entity></entity></fetch>",
          "ParameterType": "string"
        }
      ],
      "Examples": []
    },
    {
      "Verb": "Get",
      "Noun": "UsersInRole",
      "OriginalName": "pac",
      "OriginalCommandElements": [
        "org",
        "fetch"
      ],
      "Platform": [
        "Windows",
        "Linux"
      ],
      "Description": "Get users with a specific role",
      "Aliases": [
        "pac-users-role"
      ],
      "OutputHandlers": [
        {
          "ParameterSetName": "Default",
          "HandlerType": "Inline",
          "StreamOutput": true,
          "Handler": "$input | Select-Object -Skip 3 | ConvertFrom-TextTable -ColumnOffset 0,37,59,157,209,246,283 -ConvertPropertyValue | Select-Object @{N=\"User\"; E={$_.\"systemuser.fullname\"}}, @{N=\"Email\"; E={$_.\"systemuser.internalemailaddress\"}}, @{N=\"Disabled\"; E={$_.\"systemuser.isdisabled\"}} | Out-ConsoleGridView -OutputMode Multiple"
        }
      ],
      "SupportsShouldProcess": false,
      "SupportsTransactions": false,
      "NoInvocation": false,
      "Parameters": [
        {
          "OriginalName": "--xml",
          "OriginalPosition": 0,
          "Name": "Role",
          "Description": "Name of role that is associated to the users.",
          "Mandatory": true,
          "ParameterType": "string",
          "ArgumentTransformType": "Inline",
          "ArgumentTransform": " param([string]$v) \"<fetch><entity name=''systemuserroles''><link-entity name=''systemuser'' from=''systemuserid'' to=''systemuserid'' alias=''systemuser''><attribute name=''fullname''/><attribute name=''systemuserid''/><attribute name=''internalemailaddress''/><attribute name=''isdisabled''/><order attribute=''fullname''/></link-entity><link-entity name=''role'' from=''roleid'' to=''roleid'' alias=''role''><attribute name=''name''/><attribute name=''roleid''/><filter><condition attribute=''name'' operator=''eq'' value=''$($v)''/></filter><order attribute=''name''/></link-entity></entity></fetch>\""
        }
      ],
      "Examples": [
        {
          "Command": "Get-UsersInRole -Role \"System Administrator\"",
          "OriginalCommand": "",
          "Description": "Get list of all users who have role System Administrator"
        }
      ]
    }
  ]
}